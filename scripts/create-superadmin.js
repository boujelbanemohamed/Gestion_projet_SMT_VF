const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function createSuperAdmin() {
  try {
    console.log('üöÄ Cr√©ation des r√¥les et utilisateur superadmin...')

    // 1. Cr√©er les r√¥les de base
    const roles = [
      { name: 'superadmin', description: 'Super administrateur - Acc√®s complet' },
      { name: 'admin', description: 'Administrateur - Gestion compl√®te' },
      { name: 'manager', description: 'Manager - Gestion des stocks et mouvements' },
      { name: 'user', description: 'Utilisateur - Consultation et mouvements basiques' }
    ]

    console.log('üìù Cr√©ation des r√¥les...')
    for (const roleData of roles) {
      const role = await prisma.role.upsert({
        where: { name: roleData.name },
        update: { description: roleData.description },
        create: {
          name: roleData.name,
          description: roleData.description
        }
      })
      console.log(`‚úÖ R√¥le cr√©√©: ${role.name} (${role.description})`)
    }

    // 2. Hash du mot de passe
    const password = 'admin123' // Change ce mot de passe !
    const hashedPassword = await bcrypt.hash(password, 10)

    // 3. R√©cup√©rer l'ID du r√¥le superadmin
    const superadminRole = await prisma.role.findUnique({
      where: { name: 'superadmin' }
    })

    if (!superadminRole) {
      throw new Error('R√¥le superadmin non trouv√©')
    }

    // 4. Cr√©er l'utilisateur superadmin
    console.log('üë§ Cr√©ation de l\'utilisateur superadmin...')
    const user = await prisma.user.upsert({
      where: { email: 'admin@example.com' },
      update: {
        password: hashedPassword,
        firstName: 'Super',
        lastName: 'Admin',
        username: 'superadmin',
        roleId: superadminRole.id,
        isActive: true
      },
      create: {
        email: 'admin@example.com',
        password: hashedPassword,
        firstName: 'Super',
        lastName: 'Admin',
        username: 'superadmin',
        roleId: superadminRole.id,
        isActive: true
      }
    })

    console.log('‚úÖ Utilisateur superadmin cr√©√© avec succ√®s!')
    console.log('üìß Email:', user.email)
    console.log('üîë Mot de passe:', password)
    console.log('üë§ Nom d\'utilisateur:', user.username)
    console.log('üé≠ R√¥le:', superadminRole.name)

    // 5. Afficher tous les utilisateurs existants
    console.log('\nüìã Liste des utilisateurs existants:')
    const allUsers = await prisma.user.findMany({
      include: { role: true }
    })
    
    allUsers.forEach(user => {
      console.log(`- ${user.email} (${user.role?.name || 'Aucun r√¥le'})`)
    })

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createSuperAdmin() 